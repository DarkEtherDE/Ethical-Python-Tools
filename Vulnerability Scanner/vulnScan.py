import socket
from IPy import IP
import requests
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import csv
dataset=[]


class PortScan():
    banners = []
    open_ports = []
    
    def __init__(self, target, ports):
        self.target = target
        self.ports = ports
    
    def scan(self):
        for port in range(1, self.ports + 1):
            self.scan_port(port)

        
    def check_ip(self):
        try:
            IP(self.target)
            return self.target
        except ValueError:
            return socket.gethostbyname(self.target)
        
    def scan_port(self, port):
        try:
            converted_ip = self.check_ip()
            sock = socket.socket()
            sock.settimeout(.5)
            sock.connect((converted_ip, port))
            self.open_ports.append(port)
            try:
                banner = sock.recv(1024).decode().strip('\n').strip('\r')
                print('[+]Banner Received on port {}: {}'.format(port, banner))
                self.check_port_against_servicelist(port)
                self.check_banner_against_cve(banner)
                self.banners.append(banner)
            except:
                print('[!]No Banner Received on port {}'.format(port))
                self.banners.append(' ')
            sock.close()
            
        except:
            pass
    def check_port_against_servicelist(self, port):
        with open('service-names-port-numbers.csv', 'r') as csvfile:
            csv_reader = csv.reader(csvfile)
            next(csv_reader)
            
            for row in csv_reader:
                service = row[0]
                port = row[1]
                
                dataset.append((service, port))
                


    def check_banner_against_cve(self, banner):
        url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={banner}"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            cves = data.get("result", {}).get("CVE_Items", [])

            if cves:
                print(f"CVEs found for banner '{banner}':")
                for cve in cves:
                    cve_id = cve["cve"]["CVE_data_meta"]["ID"]
                    print(cve_id)
            else:
                print(f"No CVEs found for banner '{banner}'")
        else:
            print(f"Error: {response.status_code}")
            
#target = input('[+]Enter Target to scan for vulnerable ports: ')
#port_nums = int(input('[+]Enter amount of ports to scan (500 for ports 1 through 500): '))



def show_results(result_text):
    result_label.config(text=result_text)

def perform_scan():
    target = TargetEntry.get()
    port_nums = int(PortEntry.get())
    target_instance = PortScan(target, port_nums)
    target_instance.scan()

    if target_instance.open_ports:
        result_text = f"Open ports: {', '.join(map(str, target_instance.open_ports))}"
    else:
        result_text = "No open ports found."

    show_results(result_text)


# Main window
root = tk.Tk()
root.title("Vulnerability Scan Tool")
tabControl = ttk.Notebook(root)

tab1 = ttk.Frame(tabControl)
tab2 = ttk.Frame(tabControl)

tabControl.add(tab1, text='Target')
tabControl.add(tab2, text='Result')

tabControl.pack(expand=1, fill="both")

# Widgets in tab1
target_label = ttk.Label(tab1, text="Enter Target website or IP")
target_label.grid(column=0, row=0, padx=30, pady=30)

TargetEntry = tk.Entry(tab1, width=40)
TargetEntry.grid(column=1, row=0, padx=30, pady=30)

port_label = ttk.Label(tab1, text="Enter Port Range")
port_label.grid(column=0, row=1, padx=30, pady=30)

PortEntry = tk.Entry(tab1, width=40)
PortEntry.grid(column=1, row=1, padx=30, pady=30)

run_button = tk.Button(tab1, text="Perform Scan", command=perform_scan)
run_button.grid(column=1, row=2, padx=30, pady=30)

# Widget in tab2
result_label = ttk.Label(tab2, text="", font=("Helvetica", 12))
result_label.grid(column=0, row=0, padx=30, pady=30)

root.mainloop()