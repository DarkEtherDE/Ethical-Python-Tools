import socket
from IPy import IP
import requests

class PortScan():
    banners = []
    open_ports = []
    
    def __init__(self, target, ports):
        self.target = target
        self.ports = ports
    
    def scan(self):
        for port in range(1, self.ports + 1):
            self.scan_port(port)

        
    def check_ip(self):
        try:
            IP(self.target)
            return self.target
        except ValueError:
            return socket.gethostbyname(self.target)
        
    def scan_port(self, port):
        try:
            converted_ip = self.check_ip()
            sock = socket.socket()
            sock.settimeout(.5)
            sock.connect((converted_ip, port))
            self.open_ports.append(port)
            try:
                banner = sock.recv(1024).decode().strip('\n').strip('\r')
                print('[+]Banner Received on port {}: {}'.format(port, banner))
                self.check_banner_against_cve(banner)
                self.banners.append(banner)
            except:
                print('[!]No Banner Received on port {}'.format(port))
                self.banners.append(' ')
            sock.close()
            
        except:
            pass
    
    def check_banner_against_cve(self, banner):
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={banner}"
        print(url)
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            print(response.text)
            if data.get("vulnerabilities"):
                print(f"CVEs found for {banner}:")
                for cve_item in data["cve"]["CVE_Items"]:
                    cve_id = cve_item["cve"]["descriptions"]["ID"]
                    print(cve_id)
            else:
                print(f"No CVEs found for {banner}")
        else:
            print(f"Error: {response.status_code}")
            
target = input('[+]Enter Target to scan for vulnerable ports: ')
port_nums = int(input('[+]Enter amount of ports to scan (500 for ports 1 through 500): '))
target = PortScan(target, port_nums)
target.scan()
PortScan.check_banner_against_cve(PortScan, banner='Windows MacOs Debian ')
